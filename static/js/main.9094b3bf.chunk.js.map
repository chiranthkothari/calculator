{"version":3,"sources":["Components/Button/Button.js","Components/Display/Display.js","Containers/Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","val","className","children","onClick","Display","display","result","Calculator","useState","previousNumber","setPreviousNumber","currentNumber","setCurrentNumber","operator","setOperator","nextOperator","setNextOperator","input","setInput","setDisplay","setResult","numberClickHandler","operatorClickHandler","operation","postResultCalculation","useEffect","parseFloat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9094b3bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nfunction Button(props) {\r\n  //Function to add conditional styling to operator buttons\r\n  const buttonStyle = (val) => {\r\n    return val === \"+\" || val === \"-\" || val === \"x\" || val === \"รท\";\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        buttonStyle(props.children) ? \"button button_operators\" : \"button\"\r\n      }\r\n      onClick={() => props.onClick(props.children)}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nfunction Display(props) {\r\n  return (\r\n    <div className=\"display\">\r\n      <div>{props.display}</div>\r\n      <br />\r\n      <div>{props.result}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../../Components/Button/Button\";\r\nimport Display from \"../../Components/Display/Display\";\r\nimport \"./Calculator.css\";\r\n\r\nfunction Calculator() {\r\n  const [previousNumber, setPreviousNumber] = useState(\"\");\r\n  const [currentNumber, setCurrentNumber] = useState(\"\");\r\n  const [operator, setOperator] = useState(\"\");\r\n  const [nextOperator, setNextOperator] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [result, setResult] = useState(0);\r\n\r\n  //Handle number keys\r\n  const numberClickHandler = (val) => {\r\n    setInput(input + val);\r\n    setDisplay(display + val);\r\n  };\r\n\r\n  //Handle operator keys\r\n  const operatorClickHandler = (operation) => {\r\n    //If operators are clicked without entering number, return\r\n    if (display === \"\") {\r\n      return;\r\n    }\r\n    //When operator is clicked and prevNum is empty\r\n    if (previousNumber === \"\") {\r\n      setDisplay(display + operation);\r\n      setPreviousNumber(input);\r\n      setOperator(operation);\r\n      setInput(\"\");\r\n    }\r\n    //When operator is clicked; prevNum is not empty and operator is empty\r\n    if (previousNumber !== \"\" && operator === \"\") {\r\n      setDisplay(display + operation);\r\n      setOperator(operation);\r\n      setCurrentNumber(input);\r\n    }\r\n    //When once calculation cycle is completed\r\n    if (previousNumber !== \"\" && operator !== \"\") {\r\n      setDisplay(display + operation);\r\n      setNextOperator(operation);\r\n      setCurrentNumber(input);\r\n    }\r\n  };\r\n\r\n  //Equals button handler\r\n  const handleEqualsClick = () => {\r\n    if (previousNumber !== 0 && operator !== \"\") {\r\n      setCurrentNumber(input);\r\n    }\r\n  };\r\n\r\n  //Resetting states after calculation. This function is used inside useEffect\r\n  const postResultCalculation = () => {\r\n    setInput(\"\");\r\n    if (nextOperator !== \"\") {\r\n      setOperator(nextOperator);\r\n    } else {\r\n      setOperator(\"\");\r\n    }\r\n    setCurrentNumber(\"\");\r\n  };\r\n\r\n  //Result calculation triggered when current number's state is changed\r\n  useEffect(() => {\r\n    if (previousNumber === \"\" || currentNumber === \"\" || operator === \"\") {\r\n      return;\r\n    }\r\n    switch (operator) {\r\n      case \"+\":\r\n        setResult(parseFloat(previousNumber) + parseFloat(currentNumber));\r\n        setPreviousNumber(\r\n          parseFloat(previousNumber) + parseFloat(currentNumber)\r\n        );\r\n        postResultCalculation();\r\n        break;\r\n      case \"-\":\r\n        setResult(parseFloat(previousNumber) - parseFloat(currentNumber));\r\n        setPreviousNumber(\r\n          parseFloat(previousNumber) - parseFloat(currentNumber)\r\n        );\r\n        postResultCalculation();\r\n        break;\r\n      case \"x\":\r\n        setResult(parseFloat(previousNumber) * parseFloat(currentNumber));\r\n        setPreviousNumber(\r\n          parseFloat(previousNumber) * parseFloat(currentNumber)\r\n        );\r\n        postResultCalculation();\r\n        break;\r\n      case \"/\":\r\n        setResult(parseFloat(previousNumber) / parseFloat(currentNumber));\r\n        setPreviousNumber(\r\n          parseFloat(previousNumber) / parseFloat(currentNumber)\r\n        );\r\n        postResultCalculation();\r\n        break;\r\n      default:\r\n        setResult(\"Error. Please click on clear\");\r\n    }\r\n  }, [currentNumber]);\r\n\r\n  //Clear button handler\r\n  const handleClear = () => {\r\n    setDisplay(\"\");\r\n    setInput(\"\");\r\n    setOperator(\"\");\r\n    setPreviousNumber(\"\");\r\n    setCurrentNumber(\"\");\r\n    setResult(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display display={display} result={result} />\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={numberClickHandler}>7</Button>\r\n        <Button onClick={numberClickHandler}>8</Button>\r\n        <Button onClick={numberClickHandler}>9</Button>\r\n        <Button onClick={() => operatorClickHandler(\"+\")}>+</Button>\r\n      </div>\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={numberClickHandler}>4</Button>\r\n        <Button onClick={numberClickHandler}>5</Button>\r\n        <Button onClick={numberClickHandler}>6</Button>\r\n        <Button onClick={() => operatorClickHandler(\"-\")}>-</Button>\r\n      </div>\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={numberClickHandler}>1</Button>\r\n        <Button onClick={numberClickHandler}>2</Button>\r\n        <Button onClick={numberClickHandler}>3</Button>\r\n        <Button onClick={() => operatorClickHandler(\"x\")}>x</Button>\r\n      </div>\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={numberClickHandler}>.</Button>\r\n        <Button onClick={numberClickHandler}>0</Button>\r\n        <Button onClick={handleEqualsClick}>=</Button>\r\n        <Button onClick={() => operatorClickHandler(\"/\")}>รท</Button>\r\n      </div>\r\n      <p className=\"calculator__clear\" onClick={handleClear}>\r\n        Clear\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import \"./App.css\";\n// import Calc from \"./Containers/Calc/Calc\";\nimport Calculator from \"./Containers/Calculator/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}