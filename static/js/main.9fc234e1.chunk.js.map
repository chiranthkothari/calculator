{"version":3,"sources":["Components/Button/Button.js","Components/Display/Display.js","Containers/Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","val","className","children","onClick","Display","Calculator","useState","displayValue","setDisplayValue","previousOperand","setPreviousOperand","currentOperand","setCurrentOperand","operator","setOperator","setInput","useEffect","parseFloat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAqBeA,MAlBf,SAAgBC,GAEd,IAAqBC,EAIrB,OACE,qBACEC,WANiBD,EAOHD,EAAMG,SANP,MAARF,GAAuB,MAARA,GAAuB,MAARA,GAAuB,SAARA,EAMlB,0BAA4B,UAE5DG,QAAS,kBAAMJ,EAAMI,QAAQJ,EAAMG,WAJrC,SAMGH,EAAMG,Y,MCTEE,MAJf,SAAiBL,GACf,OAAO,qBAAKE,UAAU,UAAf,SAA0BF,EAAMC,O,MC4G1BK,MA3Gf,WAAsB,MAEoBC,mBAAS,IAF7B,mBAEbC,EAFa,KAECC,EAFD,OAK0BF,mBAAS,IALnC,mBAKbG,EALa,KAKIC,EALJ,OAQwBJ,mBAAS,IARjC,mBAQbK,EARa,KAQGC,EARH,OAWYN,mBAAS,IAXrB,mBAWbO,EAXa,KAWHC,EAXG,KA4DdC,EAAW,SAACf,GAChBQ,EAAgBD,EAAeP,IAYjC,OATAgB,qBAAU,iBAnBS,QAAbH,GACFL,EAAgBC,EAAkBE,GAEnB,aAAbE,GACFL,EAAgBC,EAAkBE,GAEnB,aAAbE,GACFL,EAAgBC,EAAkBE,QAEnB,WAAbE,GACFL,EAAgBC,EAAkBE,MAST,CAACA,IAU5B,sBAAKV,UAAU,aAAf,UACE,cAAC,EAAD,CAASD,IAAKO,IACd,sBAAKN,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQE,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAlEF,WACVO,EAAmBO,WAAWV,IAC9BC,EAAgB,IAChBM,EAAY,QA+DR,kBAEF,sBAAKb,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQE,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAlEG,WACfO,EAAmBO,WAAWV,IAC9BC,EAAgB,IAChBM,EAAY,aA+DR,kBAEF,sBAAKb,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQE,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAlEG,WACfO,EAAmBO,WAAWV,IAC9BC,EAAgB,IAChBM,EAAY,aA+DR,kBAEF,sBAAKb,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQE,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QAASY,EAAjB,eACA,cAAC,EAAD,CAAQZ,QA1DY,WACxBS,EAAkBK,WAAWV,KAyDzB,iBACA,cAAC,EAAD,CAAQJ,QAlEC,WACbO,EAAmBO,WAAWV,IAC9BC,EAAgB,IAChBM,EAAY,WA+DR,qBAEF,mBAAGb,UAAU,oBAAoBE,QAjCjB,WAClBK,EAAgB,IAChBM,EAAY,IACZJ,EAAmB,KA8BjB,uBC9FSQ,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9fc234e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nfunction Button(props) {\r\n  //Function to add conditional styling to operator buttons\r\n  const buttonStyle = (val) => {\r\n    return val === \"+\" || val === \"-\" || val === \"x\" || val === \"รท\";\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        buttonStyle(props.children) ? \"button button_operators\" : \"button\"\r\n      }\r\n      onClick={() => props.onClick(props.children)}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nfunction Display(props) {\r\n  return <div className=\"display\">{props.val}</div>;\r\n}\r\n\r\nexport default Display;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../../Components/Button/Button\";\r\nimport Display from \"../../Components/Display/Display\";\r\nimport \"./Calculator.css\";\r\n\r\nfunction Calculator() {\r\n  //Value displayed in calculatore's display\r\n  const [displayValue, setDisplayValue] = useState(\"\");\r\n\r\n  //Value before clicking on operator\r\n  const [previousOperand, setPreviousOperand] = useState(\"\");\r\n\r\n  //Value input after clicking operator\r\n  const [currentOperand, setCurrentOperand] = useState(\"\");\r\n\r\n  //Operator state\r\n  const [operator, setOperator] = useState(\"\");\r\n\r\n  //Add function\r\n  const add = () => {\r\n    setPreviousOperand(parseFloat(displayValue));\r\n    setDisplayValue(\"\");\r\n    setOperator(\"add\");\r\n  };\r\n  //Subtract function\r\n  const subtract = () => {\r\n    setPreviousOperand(parseFloat(displayValue));\r\n    setDisplayValue(\"\");\r\n    setOperator(\"subtract\");\r\n  };\r\n  //Multiply function\r\n  const multiply = () => {\r\n    setPreviousOperand(parseFloat(displayValue));\r\n    setDisplayValue(\"\");\r\n    setOperator(\"multiply\");\r\n  };\r\n  //Divide function\r\n  const divide = () => {\r\n    setPreviousOperand(parseFloat(displayValue));\r\n    setDisplayValue(\"\");\r\n    setOperator(\"divide\");\r\n  };\r\n\r\n  //This function sets the current operand. Once current operand is changed, useEffect is triggered\r\n  const handleEqualsClick = () => {\r\n    setCurrentOperand(parseFloat(displayValue));\r\n  };\r\n\r\n  //Final result function that gets called inside useEffet\r\n  const getResult = () => {\r\n    if (operator === \"add\") {\r\n      setDisplayValue(previousOperand + currentOperand);\r\n    }\r\n    if (operator === \"subtract\") {\r\n      setDisplayValue(previousOperand - currentOperand);\r\n    }\r\n    if (operator === \"multiply\") {\r\n      setDisplayValue(previousOperand * currentOperand);\r\n    }\r\n    if (operator === \"divide\") {\r\n      setDisplayValue(previousOperand / currentOperand);\r\n    } else return;\r\n  };\r\n\r\n  //Function to display value on calculator's display\r\n  const setInput = (val) => {\r\n    setDisplayValue(displayValue + val);\r\n  };\r\n\r\n  useEffect(() => getResult(), [currentOperand]);\r\n\r\n  //Reset calculator\r\n  const handleClear = () => {\r\n    setDisplayValue(\"\");\r\n    setOperator(\"\");\r\n    setPreviousOperand(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display val={displayValue} />\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={setInput}>7</Button>\r\n        <Button onClick={setInput}>8</Button>\r\n        <Button onClick={setInput}>9</Button>\r\n        <Button onClick={add}>+</Button>\r\n      </div>\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={setInput}>4</Button>\r\n        <Button onClick={setInput}>5</Button>\r\n        <Button onClick={setInput}>6</Button>\r\n        <Button onClick={subtract}>-</Button>\r\n      </div>\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={setInput}>1</Button>\r\n        <Button onClick={setInput}>2</Button>\r\n        <Button onClick={setInput}>3</Button>\r\n        <Button onClick={multiply}>x</Button>\r\n      </div>\r\n      <div className=\"calculator__row\">\r\n        <Button onClick={setInput}>.</Button>\r\n        <Button onClick={setInput}>0</Button>\r\n        <Button onClick={handleEqualsClick}> = </Button>\r\n        <Button onClick={divide}>รท</Button>\r\n      </div>\r\n      <p className=\"calculator__clear\" onClick={handleClear}>\r\n        Clear\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import \"./App.css\";\nimport Calculator from \"./Containers/Calculator/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}